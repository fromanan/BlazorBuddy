<dialog id="@Id">
    @* ReSharper disable once Html.AttributeValueNotResolved *@
    <form id="@Id-form" method="dialog">
        <div id="@Id-header" class="dialog-header flex-parent">
            <legend class="flex-child-text">@Title</legend>
            <FlexSpacer/>
            <IconButton IconOnly="true" Class="dialog-close"/>
        </div>
        <div id="@Id-body" class="dialog-body flex-parent">
            @BodyContent
        </div>
        <div id="@Id-footer" class="dialog-footer flex-parent">
            @FooterContent
        </div>
    </form>
</dialog>

@code
{
    #region Injected

    [Inject]
    private IJSRuntime JsRuntime { get; set; } = null!;

    #endregion

    #region Parameters

    [Parameter]
    public required string Id { get; set; }
    
    [Parameter]
    public required string Title { get; set; }
    
    [Parameter]
    public RenderFragment? BodyContent { get; set; }
    
    [Parameter]
    public RenderFragment? FooterContent { get; set; }

    #endregion

    #region Data Members

    private DialogElement _dialogElement = null!;
    
    // TODO: Create timeout for modals

    private CancellationTokenSource _tokenSource = new();

    private TaskCompletionSource<bool> _completionSource = new();

    #endregion

    #region Properties

    private Action<bool, object?>? ModalResultCallback { get; set; }

    #endregion

    #region Overrides

    protected override void OnInitialized()
    {
        _dialogElement = new DialogElement(JsRuntime, Id);
    }

    #endregion

    #region Public

    public async Task<bool> OpenModalAsync(Action<bool, object?>? callback = null)
    {
        _completionSource = new TaskCompletionSource<bool>(_tokenSource);

        await _dialogElement.OpenDialogAsync();
        
        ModalResultCallback = _AsyncCallback;
        
        await InvokeAsync(StateHasChanged);
        
        return await _completionSource.Task;

        async void _AsyncCallback(bool success, object? result)
        {
            if (!success)
            {
                _completionSource.TrySetCanceled(_tokenSource.Token);
            }
            else
            {
                _completionSource.TrySetResult(success);
            }
            
            if (ModalResultCallback is not null && callback is not null)
            {
                await Task.Run(() => callback.Invoke(success, result ?? (success ? GetDialogResult() : null)));
            }
        }
    }
    
    public async Task<bool> OpenModalAsync(Func<bool, object?, Task> asyncCallback)
    {
        _completionSource = new TaskCompletionSource<bool>(_tokenSource);

        await _dialogElement.OpenDialogAsync();
        
        ModalResultCallback = _AsyncCallback;
        
        await InvokeAsync(StateHasChanged);
        
        return await _completionSource.Task;

        async void _AsyncCallback(bool success, object? result)
        {
            if (!success)
            {
                _completionSource.TrySetCanceled(_tokenSource.Token);
            }
            else
            {
                _completionSource.TrySetResult(success);
            }
            
            if (ModalResultCallback is not null)
            {
                await asyncCallback.Invoke(success, result ?? (success ? GetDialogResult() : null));
            }
        }
    }
    
    public void OpenModal(Action<bool, object?>? callback = null)
    {
        _dialogElement.OpenDialog();
        
        ModalResultCallback = callback;
        
        InvokeAsync(StateHasChanged);
    }

    #endregion

    #region Protected Methods
    
    // Passing result lets us manually override a result, if needed by a handler
    protected async Task CloseModal(bool success = false, object? result = null)
    {
        await _dialogElement.CloseDialogAsync();

        if (ModalResultCallback is not null)
        {
            await Task.Run(() => ModalResultCallback?.Invoke(success, result ?? (success ? GetDialogResult() : null)));
        }
        
        await InvokeAsync(StateHasChanged);
    }

    protected async Task CancelDialog()
    {
        await CloseModal();
    }

    protected virtual object? GetDialogResult()
    {
        return null;
    }

    protected virtual async Task OnKeyDown(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case KeyCode.ENTER:
            case KeyCode.ACCEPT:
                await CloseModal(true);
                break;
            case KeyCode.ESCAPE:
            case KeyCode.CANCEL:
                await CancelDialog();
                break;
        }
    }

    #endregion
}