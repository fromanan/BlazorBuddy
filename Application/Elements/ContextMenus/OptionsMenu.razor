@inject IDialogService DialogService
@inject ISessionService SessionService
@inject ILayoutService LayoutService

<ContextMenu Id="@ContextMenuId.OPTIONS">
    <Item OnClick="@OnRenameSession" Enabled="@(!IsPrevious)">
        Rename
    </Item>
    <Item OnClick="@OnDuplicateSession" Enabled="@(!IsPrevious)">
        Duplicate
    </Item>
    <Item OnClick="@OnDeleteSession">
        Delete
    </Item>
    <Separator/>
    <Item OnClick="@OnSortByTitle" Enabled="@(!IsPrevious)">
        Sort by title
    </Item>
    <Item OnClick="@OnSortByUrl" Enabled="@(!IsPrevious)">
        Sort by URL
    </Item>
    <Item OnClick="@OnUnifyWindows" Enabled="@(!IsPrevious)">
        Unify windows
    </Item>
    <Item OnClick="@OnOverwriteSession" Enabled="@(!IsPrevious)">
        Overwrite with current
    </Item>
</ContextMenu>

@code
{
    #region Properties

    private bool IsPrevious => SessionService.SelectedSession.SessionType is SessionType.Previous;

    #endregion
    
    #region Event Handlers

    private async Task OnRenameSession(ItemClickEventArgs args)
    {
        await DialogService.ShowDialogAsync(DialogId.Rename, OnModalSubmit);
    }

    private void OnDuplicateSession(ItemClickEventArgs args)
    {
        SessionService.DuplicateSession(-1, string.Empty);
    }

    private void OnDeleteSession(ItemClickEventArgs args)
    {
        SessionService.DeleteSession(-1);
    }
    
    private void OnSortByTitle(ItemClickEventArgs args)
    {
        LayoutService.ChangeSortOrder(SortOrder.Title);
    }
    
    private void OnSortByUrl(ItemClickEventArgs args)
    {
        LayoutService.ChangeSortOrder(SortOrder.Url);
    }

    private void OnUnifyWindows(ItemClickEventArgs args)
    {
        SessionService.UnifyWindows(-1);
    }

    private void OnOverwriteSession(ItemClickEventArgs args)
    {
        SessionService.OverwriteSession(-1);
    }
    
    private async Task OnModalSubmit(bool success, object? result)
    {
        if (!success)
            return;
        
        switch (result)
        {
            case SaveModal.SaveSessionResult saveSessionResult:
            {
                await SessionService.SaveCurrentSession(saveSessionResult.Name);
                await InvokeAsync(StateHasChanged);
                return;
            }
            case RenameDialog.NameSessionResult nameSessionResult:
            {
                SessionService.RenameSession(-1, nameSessionResult.Name);
                await InvokeAsync(StateHasChanged);
                return;
            }
            case ImportDialog.ImportFileResult importFileResult:
            {
                await SessionService.ImportSession(importFileResult.FileContents);
                await InvokeAsync(StateHasChanged);
                return;
            }
        }
    }

    #endregion
}